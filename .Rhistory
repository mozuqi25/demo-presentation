by = "movieId"
)
maxrating <- ratings %>%
filter(avg.rating == max(avg.rating))
minrating <- ratings %>%
filter(avg.rating == min(avg.rating))
minsdrating <- ratings %>%
filter(sd.rating == min(sd.rating))
# Filter movies using grep
selected_movies <- ratings[grep("Totoro|Mononoke|Spirited", ratings$title), ]
# Calculate the average rating
average_rating <- mean(selected_movies$avg.rating, na.rm=TRUE)
print(average_rating)
ratings.wide = data.ratings %>%
select(userId, movieId, rating) %>%
pivot_wider(
names_from = movieId, values_from = rating)
# Filter movies using grep
selected_movies <- ratings[grep("Totoro|Mononoke|Spirited", ratings$title), ]
# Calculate the average rating
average_rating <- mean(selected_movies$avg.rating)
print(average_rating)
values_fill = list(rating = 0)
# )
set.seed(123) # NOTE: don't remove this.
X = as.matrix(ratings.wide[, -1])
X[is.na(X)] <- 0
res = kmeans(X , centers = 5)
# Create a data frame with cluser and userId info
cluster.data = tibble(userId = ratings.wide$userId, cluster = res$cluster)
# Merge this with data.ratings
data.ratings = left_join(
data.ratings,
cluster.data,
by = "userId"
)
#gbdr <- data.ratings %>%
#group_by(cluster, movieId) #%>%
# ...
library(dplyr)
# Assuming your data is in a data frame called 'df'
gb_top_movies <- data.ratings %>%
# Group by cluster and movieId, calculate mean rating
group_by(cluster, movieId) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE)) %>%
# Group by cluster and select top 3 movies by avg_rating
group_by(cluster) %>%
slice_max(order_by = avg_rating, n = 3, with_ties = FALSE)
gbname_top <- gb_top_movies %>%
left_join(data.movies, by = "movieId")
user_cluster <- filter(data.ratings,userId == 414)
print(user_cluster)
gb_avg_c5_movies <- data.ratings %>%
# Group by cluster and movieId, calculate mean rating
filter(cluster == 5) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE)) %>%
left_join(data.movies, by = "movieId") %>%
filter(cluster == 5)
user_cluster <- filter(data.ratings,userId == 414)
print(user_cluster)
gb_avg_c5_movies <- data.ratings %>%
# Group by cluster and movieId, calculate mean rating
filter(cluster == 5) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE)) %>%
left_join(data.movies, by = "movieId")
unique_rows_B <- anti_join(gb_avg_c5_movies, user_cluster, by = "movieId")
movie_rec <- unique_rows_B %>%
arrange(desc(avg_rating)) %>%
head(5)
View(gb_avg_c5_movies)
# Please do not touch this R code chunk!
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE,
out.width = "70%",
fig.width = 8,
fig.height = 6,
fig.retina = 3)
set.seed(6)
library(tidyverse)
data.movies = read_csv("movies.csv")
data.ratings = read_csv("ratings.csv")
head(data.movies)
head(data.ratings)
nrow(data.movies)
library(dplyr)
nrow(distinct(data.ratings, movieId))
nrow(data.movies) - nrow(distinct(data.ratings, movieId))
data.movies =
data.movies %>%
separate(genres, into ='main.genre', sep = "\\|", extra = "drop")
top3_common_main_genre <- data.movies %>%
group_by(main.genre) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(3)
top3_common_main_genre
year.parens = str_extract(data.movies$title, "\\(\\d{4}\\)")
year = as.integer(str_replace_all(year.parens, "[()]", ""))
# ... what is the earliest year?
min(year, na.rm=TRUE)
# Find the row number in data.movies (replace 1908 with the year you found above)
year.index = which(year == 1902)
# Then, pick out this row number in the data.movies data frame...
data.movies[year.index, ]
# Here is some suggested code:
data.ratings = data.ratings %>%
group_by(movieId) %>%
mutate(num.ratings = n()) %>%
filter(num.ratings >= 25)
nrow(distinct(data.ratings, movieId))
ratings = data.ratings %>%
group_by(movieId) %>%
summarise(avg.rating = mean(rating,na.rm= TRUE), sd.rating=sd(rating,na.rm= TRUE))
head(ratings)
#notes the duplicate vs insturction
ratings =
left_join(
ratings,
data.movies,
by = "movieId"
)
maxrating <- ratings %>%
filter(avg.rating == max(avg.rating))
minrating <- ratings %>%
filter(avg.rating == min(avg.rating))
minsdrating <- ratings %>%
filter(sd.rating == min(sd.rating))
# Filter movies using grep
selected_movies <- ratings[grep("Totoro|Mononoke|Spirited", ratings$title), ]
# Calculate the average rating
average_rating <- mean(selected_movies$avg.rating, na.rm=TRUE)
print(average_rating)
ratings.wide = data.ratings %>%
select(userId, movieId, rating) %>%
pivot_wider(
names_from = movieId, values_from = rating)
# Filter movies using grep
selected_movies <- ratings[grep("Totoro|Mononoke|Spirited", ratings$title), ]
# Calculate the average rating
average_rating <- mean(selected_movies$avg.rating)
print(average_rating)
values_fill = list(rating = 0)
# )
set.seed(123) # NOTE: don't remove this.
X = as.matrix(ratings.wide[, -1])
X[is.na(X)] <- 0
res = kmeans(X , centers = 5)
# Create a data frame with cluser and userId info
cluster.data = tibble(userId = ratings.wide$userId, cluster = res$cluster)
# Merge this with data.ratings
data.ratings = left_join(
data.ratings,
cluster.data,
by = "userId"
)
#gbdr <- data.ratings %>%
#group_by(cluster, movieId) #%>%
# ...
library(dplyr)
# Assuming your data is in a data frame called 'df'
gb_top_movies <- data.ratings %>%
# Group by cluster and movieId, calculate mean rating
group_by(cluster, movieId) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE)) %>%
# Group by cluster and select top 3 movies by avg_rating
group_by(cluster) %>%
slice_max(order_by = avg_rating, n = 3, with_ties = FALSE)
gbname_top <- gb_top_movies %>%
left_join(data.movies, by = "movieId")
# Please do not touch this R code chunk!
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE,
out.width = "70%",
fig.width = 8,
fig.height = 6,
fig.retina = 3)
set.seed(6)
library(tidyverse)
data.movies = read_csv("movies.csv")
data.ratings = read_csv("ratings.csv")
head(data.movies)
head(data.ratings)
nrow(data.movies)
library(dplyr)
nrow(distinct(data.ratings, movieId))
nrow(data.movies) - nrow(distinct(data.ratings, movieId))
data.movies =
data.movies %>%
separate(genres, into ='main.genre', sep = "\\|", extra = "drop")
top3_common_main_genre <- data.movies %>%
group_by(main.genre) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(3)
top3_common_main_genre
year.parens = str_extract(data.movies$title, "\\(\\d{4}\\)")
year = as.integer(str_replace_all(year.parens, "[()]", ""))
# ... what is the earliest year?
min(year, na.rm=TRUE)
# Find the row number in data.movies (replace 1908 with the year you found above)
year.index = which(year == 1902)
# Then, pick out this row number in the data.movies data frame...
data.movies[year.index, ]
# Here is some suggested code:
data.ratings = data.ratings %>%
group_by(movieId) %>%
mutate(num.ratings = n()) %>%
filter(num.ratings >= 25)
nrow(distinct(data.ratings, movieId))
ratings = data.ratings %>%
group_by(movieId) %>%
summarise(avg.rating = mean(rating,na.rm= TRUE), sd.rating=sd(rating,na.rm= TRUE))
head(ratings)
#notes the duplicate vs insturction
ratings =
left_join(
ratings,
data.movies,
by = "movieId"
)
maxrating <- ratings %>%
filter(avg.rating == max(avg.rating))
minrating <- ratings %>%
filter(avg.rating == min(avg.rating))
minsdrating <- ratings %>%
filter(sd.rating == min(sd.rating))
# Filter movies using grep
selected_movies <- ratings[grep("Totoro|Mononoke|Spirited", ratings$title), ]
# Calculate the average rating
average_rating <- mean(selected_movies$avg.rating, na.rm=TRUE)
print(average_rating)
ratings.wide = data.ratings %>%
select(userId, movieId, rating) %>%
pivot_wider(
names_from = movieId, values_from = rating)
# Filter movies using grep
selected_movies <- ratings[grep("Totoro|Mononoke|Spirited", ratings$title), ]
# Calculate the average rating
average_rating <- mean(selected_movies$avg.rating)
print(average_rating)
values_fill = list(rating = 0)
# )
set.seed(123) # NOTE: don't remove this.
X = as.matrix(ratings.wide[, -1])
X[is.na(X)] <- 0
res = kmeans(X , centers = 5)
# Create a data frame with cluser and userId info
cluster.data = tibble(userId = ratings.wide$userId, cluster = res$cluster)
# Merge this with data.ratings
data.ratings = left_join(
data.ratings,
cluster.data,
by = "userId"
)
#gbdr <- data.ratings %>%
#group_by(cluster, movieId) #%>%
# ...
library(dplyr)
# Assuming your data is in a data frame called 'df'
gb_top_movies <- data.ratings %>%
# Group by cluster and movieId, calculate mean rating
group_by(cluster, movieId) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE)) %>%
# Group by cluster and select top 3 movies by avg_rating
group_by(cluster) %>%
slice_max(order_by = avg_rating, n = 3, with_ties = FALSE)
gbname_top <- gb_top_movies %>%
left_join(data.movies, by = "movieId")
# Please do not touch this R code chunk!
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE,
out.width = "70%",
fig.width = 8,
fig.height = 6,
fig.retina = 3)
set.seed(6)
library(tidyverse)
data.movies = read_csv("movies.csv")
data.ratings = read_csv("ratings.csv")
head(data.movies)
head(data.ratings)
nrow(data.movies)
library(dplyr)
nrow(distinct(data.ratings, movieId))
nrow(data.movies) - nrow(distinct(data.ratings, movieId))
data.movies =
data.movies %>%
separate(genres, into ='main.genre', sep = "\\|", extra = "drop")
top3_common_main_genre <- data.movies %>%
group_by(main.genre) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(3)
top3_common_main_genre
year.parens = str_extract(data.movies$title, "\\(\\d{4}\\)")
year = as.integer(str_replace_all(year.parens, "[()]", ""))
# ... what is the earliest year?
min(year, na.rm=TRUE)
# Find the row number in data.movies (replace 1908 with the year you found above)
year.index = which(year == 1902)
# Then, pick out this row number in the data.movies data frame...
data.movies[year.index, ]
# Here is some suggested code:
data.ratings = data.ratings %>%
group_by(movieId) %>%
mutate(num.ratings = n()) %>%
filter(num.ratings >= 25)
nrow(distinct(data.ratings, movieId))
ratings = data.ratings %>%
group_by(movieId) %>%
summarise(avg.rating = mean(rating,na.rm= TRUE), sd.rating=sd(rating,na.rm= TRUE))
head(ratings)
#notes the duplicate vs insturction
ratings =
left_join(
ratings,
data.movies,
by = "movieId"
)
maxrating <- ratings %>%
filter(avg.rating == max(avg.rating))
minrating <- ratings %>%
filter(avg.rating == min(avg.rating))
minsdrating <- ratings %>%
filter(sd.rating == min(sd.rating))
# Filter movies using grep
selected_movies <- ratings[grep("Totoro|Mononoke|Spirited", ratings$title), ]
# Calculate the average rating
average_rating <- mean(selected_movies$avg.rating, na.rm=TRUE)
print(average_rating)
ratings.wide = data.ratings %>%
select(userId, movieId, rating) %>%
pivot_wider(
names_from = movieId, values_from = rating)
# Filter movies using grep
selected_movies <- ratings[grep("Totoro|Mononoke|Spirited", ratings$title), ]
# Calculate the average rating
average_rating <- mean(selected_movies$avg.rating)
print(average_rating)
values_fill = list(rating = 0)
# )
set.seed(123) # NOTE: don't remove this.
X = as.matrix(ratings.wide[, -1])
X[is.na(X)] <- 0
res = kmeans(X , centers = 5)
# Create a data frame with cluser and userId info
cluster.data = tibble(userId = ratings.wide$userId, cluster = res$cluster)
# Merge this with data.ratings
data.ratings = left_join(
data.ratings,
cluster.data,
by = "userId"
)
#gbdr <- data.ratings %>%
#group_by(cluster, movieId) #%>%
# ...
library(dplyr)
# Assuming your data is in a data frame called 'df'
gb_top_movies <- data.ratings %>%
# Group by cluster and movieId, calculate mean rating
group_by(cluster, movieId) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE)) %>%
# Group by cluster and select top 3 movies by avg_rating
group_by(cluster) %>%
slice_max(order_by = avg_rating, n = 3, with_ties = FALSE)
gbname_top <- gb_top_movies %>%
left_join(data.movies, by = "movieId")
user_cluster <- filter(data.ratings,userId == 414)
print(user_cluster)
#Opt A
gb_avg_c5_movies <- data.ratings %>%
# Group by cluster and movieId, calculate mean rating
group_by(cluster, movieId) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE)) %>%
left_join(data.movies, by = "movieId") %>%
filter(cluster == 5)
unique_rows_A <- anti_join(gb_avg_c5_movies, user_cluster, by = "movieId")
movie_rec <- unique_rows_B %>%
arrange(desc(avg_rating)) %>%
head(5)
# Please do not touch this R code chunk!
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE,
out.width = "70%",
fig.width = 8,
fig.height = 6,
fig.retina = 3)
set.seed(6)
library(tidyverse)
data.movies = read_csv("movies.csv")
data.ratings = read_csv("ratings.csv")
head(data.movies)
head(data.ratings)
nrow(data.movies)
library(dplyr)
nrow(distinct(data.ratings, movieId))
nrow(data.movies) - nrow(distinct(data.ratings, movieId))
data.movies =
data.movies %>%
separate(genres, into ='main.genre', sep = "\\|", extra = "drop")
top3_common_main_genre <- data.movies %>%
group_by(main.genre) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(3)
top3_common_main_genre
year.parens = str_extract(data.movies$title, "\\(\\d{4}\\)")
year = as.integer(str_replace_all(year.parens, "[()]", ""))
# ... what is the earliest year?
min(year, na.rm=TRUE)
# Find the row number in data.movies (replace 1908 with the year you found above)
year.index = which(year == 1902)
# Then, pick out this row number in the data.movies data frame...
data.movies[year.index, ]
# Here is some suggested code:
data.ratings = data.ratings %>%
group_by(movieId) %>%
mutate(num.ratings = n()) %>%
filter(num.ratings >= 25)
nrow(distinct(data.ratings, movieId))
ratings = data.ratings %>%
group_by(movieId) %>%
summarise(avg.rating = mean(rating,na.rm= TRUE), sd.rating=sd(rating,na.rm= TRUE))
head(ratings)
#notes the duplicate vs insturction
ratings =
left_join(
ratings,
data.movies,
by = "movieId"
)
maxrating <- ratings %>%
filter(avg.rating == max(avg.rating))
minrating <- ratings %>%
filter(avg.rating == min(avg.rating))
minsdrating <- ratings %>%
filter(sd.rating == min(sd.rating))
# Filter movies using grep
selected_movies <- ratings[grep("Totoro|Mononoke|Spirited", ratings$title), ]
# Calculate the average rating
average_rating <- mean(selected_movies$avg.rating, na.rm=TRUE)
print(average_rating)
ratings.wide = data.ratings %>%
select(userId, movieId, rating) %>%
pivot_wider(
names_from = movieId, values_from = rating)
# Filter movies using grep
selected_movies <- ratings[grep("Totoro|Mononoke|Spirited", ratings$title), ]
# Calculate the average rating
average_rating <- mean(selected_movies$avg.rating)
print(average_rating)
values_fill = list(rating = 0)
# )
set.seed(123) # NOTE: don't remove this.
X = as.matrix(ratings.wide[, -1])
X[is.na(X)] <- 0
res = kmeans(X , centers = 5)
# Create a data frame with cluser and userId info
cluster.data = tibble(userId = ratings.wide$userId, cluster = res$cluster)
# Merge this with data.ratings
data.ratings = left_join(
data.ratings,
cluster.data,
by = "userId"
)
#gbdr <- data.ratings %>%
#group_by(cluster, movieId) #%>%
# ...
library(dplyr)
# Assuming your data is in a data frame called 'df'
gb_top_movies <- data.ratings %>%
# Group by cluster and movieId, calculate mean rating
group_by(cluster, movieId) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE)) %>%
# Group by cluster and select top 3 movies by avg_rating
group_by(cluster) %>%
slice_max(order_by = avg_rating, n = 3, with_ties = FALSE)
gbname_top <- gb_top_movies %>%
left_join(data.movies, by = "movieId")
user_cluster <- filter(data.ratings,userId == 414)
print(user_cluster)
#Opt A
gb_avg_c5_movies <- data.ratings %>%
# Group by cluster and movieId, calculate mean rating
group_by(cluster, movieId) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE)) %>%
left_join(data.movies, by = "movieId") %>%
filter(cluster == 5)
unique_rows_A <- anti_join(gb_avg_c5_movies, user_cluster, by = "movieId")
movie_rec <- unique_rows_A %>%
arrange(desc(avg_rating)) %>%
head(5)
#Opt B
gb_avg_c5_moviesB <- data.ratings %>%
# Group by cluster and movieId, calculate mean rating
group_by(cluster, movieId) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE)) %>%
left_join(data.movies, by = "movieId") %>%
filter(cluster == 5)
unique_rows_B <- anti_join(gb_avg_c5_moviesB, user_cluster, by = "movieId")
movie_recB <- unique_rows_B %>%
arrange(desc(avg_rating)) %>%
head(5)
View(movie_rec)
View(movie_recB)
View(gb_avg_c5_moviesB)
View(gb_avg_c5_moviesB)
setwd("D:/CRP/Asg-3/demo")
